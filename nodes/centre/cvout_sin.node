<Comment>
Copyright (c) 2018-2020, sigboost, inc., All Rights Reserved.
This file is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license.

<I/O>
input Int : Reset
input Float : Frequency
input Float : Amplitude

<Description>
Output sine wave from CV. Sampling rate is 40kHz.

<Parameter>
parameter Number = ["1", "2"] : Jack number of CV input
parameter Freq = 10.0 : Frequency (Hz)
parameter Amp = 1.0 : Amplitude

<Requirements>
require CV_Output_Vec_${Number}

<Setup>
Midiglue::attach(Midiglue::STEREOMINI_OUT_${Number}, ${this}, 0, Midiglue::DataCategory::U32);
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>
static Float count = 0;
static Float omega;
static Float period;
static Float amp = ${Amp};
static Float output[Midiglue::CV_RESAMPLE_FACTOR] = {0.0f};

if (@jackin0){
    const uint32_t buf_size = *(uint32_t*)(_data); // currently, buf_size is always equal to Midiglue::CV_RESAMPLE_FACTOR
    for (uint32_t i = 0; i < buf_size; ++i){
        count += (Float)Midiglue::CV_PERIOD_US / 1e6;
        while (period != 0.0f && count > period) count -= period;
        output[i] = amp * sin(omega * count);
    }
    Midiglue::write(Midiglue::STEREOMINI_OUT_${Number}, 0, output, sizeof(Float) * buf_size, Midiglue::DataCategory::VoltageArray);
}else if (@in0){
    count = 0.0f;
}else if(@in1){
    if (in1 == 0.0f) {
        omega = 0.0f;
        period = 0.0f;
    }else{
        omega = 2.0f * PI * in1;
        period = 1.0f / in1;
    }
}else if(@in2){
    amp = in2;
}else if (@setup){
    if (${Freq} == 0.0f) {
        omega = 0.0f;
        period = 0.0f;
    }else{
        omega = 2.0f * PI * ${Freq};
        period = 1.0f / ${Freq};
    }
}
