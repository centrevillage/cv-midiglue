<Comment>
Euclidean Rhythm generator.

MIT License Copyright (c) 2020 centrevillage
(see LICENSE file)

<I/O>
input Int : Step
input Int : Fill
input Int : Length
output Int : Output

<Description>

<Parameter>
parameter Fill = 4 : Initial Fill value
parameter Length = 16 : Initial Length value

<Code>

static const uint16_t euclid_pat[16][16] = {
  {
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001,
    0b0000000000000001
  },
  {
    0b0000000000000001,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011,
    0b0000000000000011
  },
  {
    0b0000000000000001,
    0b0000000000000101,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111,
    0b0000000000000111
  },
  {
    0b0000000000000001,
    0b0000000000000101,
    0b0000000000001101,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111,
    0b0000000000001111
  },
  {
    0b0000000000000001,
    0b0000000000001001,
    0b0000000000001101,
    0b0000000000011101,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111,
    0b0000000000011111
  },
  {
    0b0000000000000001,
    0b0000000000001001,
    0b0000000000010101,
    0b0000000000101101,
    0b0000000000111101,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111,
    0b0000000000111111
  },
  {
    0b0000000000000001,
    0b0000000000010001,
    0b0000000000101001,
    0b0000000000101101,
    0b0000000001011101,
    0b0000000001111101,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111,
    0b0000000001111111
  },
  {
    0b0000000000000001,
    0b0000000000010001,
    0b0000000000101001,
    0b0000000001010101,
    0b0000000010101101,
    0b0000000011011101,
    0b0000000011111101,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111,
    0b0000000011111111
  },
  {
    0b0000000000000001,
    0b0000000000100001,
    0b0000000001001001,
    0b0000000010101001,
    0b0000000010101101,
    0b0000000101101101,
    0b0000000110111101,
    0b0000000111111101,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111,
    0b0000000111111111
  },
  {
    0b0000000000000001,
    0b0000000000100001,
    0b0000000010010001,
    0b0000000100101001,
    0b0000000101010101,
    0b0000000110101101,
    0b0000001011011101,
    0b0000001110111101,
    0b0000001111111101,
    0b0000001111111111,
    0b0000001111111111,
    0b0000001111111111,
    0b0000001111111111,
    0b0000001111111111,
    0b0000001111111111,
    0b0000001111111111
  },
  {
    0b0000000000000001,
    0b0000000001000001,
    0b0000000010010001,
    0b0000000100101001,
    0b0000001010101001,
    0b0000001010101101,
    0b0000010110101101,
    0b0000011011011101,
    0b0000011101111101,
    0b0000011111111101,
    0b0000011111111111,
    0b0000011111111111,
    0b0000011111111111,
    0b0000011111111111,
    0b0000011111111111,
    0b0000011111111111
  },
  {
    0b0000000000000001,
    0b0000000001000001,
    0b0000000100010001,
    0b0000001001001001,
    0b0000010010101001,
    0b0000010101010101,
    0b0000011010101101,
    0b0000101101101101,
    0b0000110111011101,
    0b0000111101111101,
    0b0000111111111101,
    0b0000111111111111,
    0b0000111111111111,
    0b0000111111111111,
    0b0000111111111111,
    0b0000111111111111
  },
  {
    0b0000000000000001,
    0b0000000010000001,
    0b0000001000100001,
    0b0000010010010001,
    0b0000100100101001,
    0b0000101010101001,
    0b0000101010101101,
    0b0000110110101101,
    0b0001011011011101,
    0b0001101110111101,
    0b0001111011111101,
    0b0001111111111101,
    0b0001111111111111,
    0b0001111111111111,
    0b0001111111111111,
    0b0001111111111111
  },
  {
    0b0000000000000001,
    0b0000000010000001,
    0b0000001000100001,
    0b0000100010010001,
    0b0000100100101001,
    0b0001010010101001,
    0b0001010101010101,
    0b0001011010101101,
    0b0010110110101101,
    0b0010111011011101,
    0b0011101110111101,
    0b0011111011111101,
    0b0011111111111101,
    0b0011111111111111,
    0b0011111111111111,
    0b0011111111111111
  },
  {
    0b0000000000000001,
    0b0000000100000001,
    0b0000010000100001,
    0b0000100010010001,
    0b0001001001001001,
    0b0010010100101001,
    0b0010101010101001,
    0b0010101010101101,
    0b0011010110101101,
    0b0101101101101101,
    0b0110111011011101,
    0b0111011110111101,
    0b0111110111111101,
    0b0111111111111101,
    0b0111111111111111,
    0b0111111111111111
  },
  {
    0b0000000000000001,
    0b0000000100000001,
    0b0000100001000001,
    0b0001000100010001,
    0b0010010010010001,
    0b0010100100101001,
    0b0101001010101001,
    0b0101010101010101,
    0b0101101010101101,
    0b1010110110101101,
    0b1011011011011101,
    0b1101110111011101,
    0b1110111101111101,
    0b1111110111111101,
    0b1111111111111101,
    0b1111111111111111
  }
};

static auto clip = [](auto v, auto min, auto max) {
  return (v < min ? min : (v > max ? max : v));
};

static Int step = 0;
static Int fill = (${Fill} < 0 ? 0 : (${Fill} > 16 ? 16 : ${Fill}));
static Int length = (${Length} < 1 ? 1 : (${Length} > 16 ? 16 : ${Length}));

if (@in0) {
  if (fill == 0) {
    out0 = 0;
  } else {
    step = clip(in0, 0, 127) % length;
    const uint16_t pat_bits = euclid_pat[length-1][fill-1];
    const uint16_t bit_mask = (((uint16_t)1) << step);
    out0 = !!(pat_bits & bit_mask);
  }
} else if (@in1) {
  fill = clip(in1, 0, 16);
} else if (@in2) {
  length = clip(in2, 1, 16);
}
